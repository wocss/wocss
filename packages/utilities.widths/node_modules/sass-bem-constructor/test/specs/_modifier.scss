@include describe("The _modifier function") {

    $_bem-current-context: () !global;

    @include it("should generate a modifier selector for the current block") {
        @include block('block', 'object') {
            @include should( expect( #{_modifier('modifier')} ), to( be( '.o-block--modifier' )));
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate a modifier selector for the current element") {
        @include block('block', 'object') {
            @include element('element') {
                @include should( expect( #{_modifier('modifier')} ), to( be( '.o-block__element--modifier' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate multiple modifier selectors for the current block") {
        @include block('block', 'object') {
            @include should( expect( #{_modifier('modifier1', 'modifier2')} ), to( be( '.o-block--modifier1, .o-block--modifier2' )));
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate multiple modifier selectors for the current element") {
        @include block('block', 'object') {
            @include element('element') {
                @include should( expect( #{_modifier('modifier1', 'modifier2')} ), to( be( '.o-block__element--modifier1, .o-block__element--modifier2' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate multiple modifier selectors for multiple elements") {
        @include block('block', 'object') {
            @include element('element1', 'element2') {
                @include should( expect( #{_modifier('modifier1', 'modifier2')} ), to( be( '.o-block__element1--modifier1, .o-block__element2--modifier1, .o-block__element1--modifier2, .o-block__element2--modifier2' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should return false or throw error if modifier is created within another modifier") {
        @include block('block', 'object') {
            @include modifier('modifier1') {
                @include should( expect( _modifier('modifier2') ), to( be( false )));
            }
        }
    }

}
