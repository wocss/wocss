@include describe("The _modifies-element function") {

    $_bem-current-context: () !global;

    @include it("should generate a modifier selector for the given element within  the current block") {
        @include block('block', 'object') {
            @include element('element');
            @include modifier('modifier') {
                @include should( expect( #{_modifies-element('element')} ), to( be( '.o-block--modifier .o-block__element' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate a modifier selector for the given elements within  the current block") {
        @include block('block', 'object') {
            @include element('element1', 'element2');
            @include modifier('modifier') {
                @include should( expect( #{_modifies-element('element1', 'element2')} ), to( be( '.o-block--modifier .o-block__element1, .o-block--modifier .o-block__element2' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate a combined modifier selector for the given elements within  the current block") {
        @include block('block', 'object') {
            @include element('element');
            @include modifier('modifier1', 'modifier2') {
                @include should( expect( #{_modifies-element('element')} ), to( be( '.o-block--modifier1.o-block--modifier2 .o-block__element' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate a state modifier selector for the given elements within  the current block") {
        @include block('block', 'object') {
            @include element('element1', 'element2');
            @include state('state') {
                @include should( expect( #{_modifies-element('element1', 'element2')} ), to( be( '.o-block.is-state .o-block__element1, .o-block.is-state .o-block__element2' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should generate a theme modifier selector for the given elements within  the current block") {
        @include block('block', 'object') {
            @include element('element1', 'element2');
            @include theme('theme') {
                @include should( expect( #{_modifies-element('element1', 'element2')} ), to( be( '.t-theme .o-block .o-block__element1, .t-theme .o-block .o-block__element2' )));
            }
        }
    }


    $_bem-current-context: () !global;

    @include it("should return false or throw error if called within an element") {
        @include block('block', 'object') {
            @include element('element') {
                @include should( expect( _modifies-element('element') ), to( be( false )));
            }
        }
    }

}
